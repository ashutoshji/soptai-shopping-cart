{"ast":null,"code":"import { call, put, select, all, takeLatest } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport history from '../../../services/history';\nimport api from '../../../services/api';\nimport { addToCartSuccess, updateAmountSuccess } from './actions';\nimport { formatPrice } from '../../../util/format';\n\nfunction* addToCart({\n  id\n}) {\n  // get the current state and perform a selector on it\n  const productExists = yield select(state => state.cart.find(p => p.id === id)); // checking the stock amount\n\n  const stock = yield call(api.get, `/stock/${id}`);\n  const stockAmount = stock.data.amount; // if exists, we use the current amount, otherwise, it's zero because it's not on cart yet\n\n  const currentAmount = productExists ? productExists.amount : 0;\n  const amount = currentAmount + 1; // we update the amount\n\n  if (amount > stockAmount) {\n    // console.tron.warn(`Out of stock`);\n    toast.error('Amount requested out of stock');\n    return;\n  }\n\n  if (productExists) {\n    yield put(updateAmountSuccess(id, amount));\n  } else {\n    const response = yield call(api.get, `/products/${id}`);\n    const data = { ...response.data,\n      amount: 1,\n      priceFormatted: formatPrice(response.data.price)\n    };\n    yield put(addToCartSuccess(data));\n    history.push('/cart'); // we only navigate on the first time we choose a product\n  }\n}\n\nfunction* updateAmount({\n  id,\n  amount\n}) {\n  if (amount <= 0) return;\n  const stock = yield call(api.get, `stock/${id}`);\n  const stockAmount = stock.data.amount;\n\n  if (amount > stockAmount) {\n    toast.error('Amount requested out of stock');\n    return;\n  }\n\n  yield put(updateAmountSuccess(id, amount));\n}\n\nexport default all([takeLatest('@cart/ADD_REQUEST', addToCart), takeLatest('@cart/UPDATE_AMOUNT_REQUEST', updateAmount)]);","map":{"version":3,"sources":["/Users/ashutoshkumar/soptai-shopping-cart/src/store/modules/cart/sagas.js"],"names":["call","put","select","all","takeLatest","toast","history","api","addToCartSuccess","updateAmountSuccess","formatPrice","addToCart","id","productExists","state","cart","find","p","stock","get","stockAmount","data","amount","currentAmount","error","response","priceFormatted","price","push","updateAmount"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,UAAjC,QAAmD,oBAAnD;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,WAAtD;AACA,SAASC,WAAT,QAA4B,sBAA5B;;AAEA,UAAUC,SAAV,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA4B;AACxB;AACA,QAAMC,aAAa,GAAG,MAAMX,MAAM,CAACY,KAAK,IACpCA,KAAK,CAACC,IAAN,CAAWC,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACL,EAAF,KAASA,EAA9B,CAD8B,CAAlC,CAFwB,CAMxB;;AACA,QAAMM,KAAK,GAAG,MAAMlB,IAAI,CAACO,GAAG,CAACY,GAAL,EAAW,UAASP,EAAG,EAAvB,CAAxB;AACA,QAAMQ,WAAW,GAAGF,KAAK,CAACG,IAAN,CAAWC,MAA/B,CARwB,CASxB;;AACA,QAAMC,aAAa,GAAGV,aAAa,GAAGA,aAAa,CAACS,MAAjB,GAA0B,CAA7D;AAEA,QAAMA,MAAM,GAAGC,aAAa,GAAG,CAA/B,CAZwB,CAYU;;AAElC,MAAID,MAAM,GAAGF,WAAb,EAA0B;AACtB;AACAf,IAAAA,KAAK,CAACmB,KAAN,CAAY,+BAAZ;AACA;AACH;;AAED,MAAIX,aAAJ,EAAmB;AACf,UAAMZ,GAAG,CAACQ,mBAAmB,CAACG,EAAD,EAAKU,MAAL,CAApB,CAAT;AACH,GAFD,MAEO;AACH,UAAMG,QAAQ,GAAG,MAAMzB,IAAI,CAACO,GAAG,CAACY,GAAL,EAAW,aAAYP,EAAG,EAA1B,CAA3B;AAEA,UAAMS,IAAI,GAAG,EACT,GAAGI,QAAQ,CAACJ,IADH;AAETC,MAAAA,MAAM,EAAE,CAFC;AAGTI,MAAAA,cAAc,EAAEhB,WAAW,CAACe,QAAQ,CAACJ,IAAT,CAAcM,KAAf;AAHlB,KAAb;AAKA,UAAM1B,GAAG,CAACO,gBAAgB,CAACa,IAAD,CAAjB,CAAT;AAEAf,IAAAA,OAAO,CAACsB,IAAR,CAAa,OAAb,EAVG,CAUoB;AAC1B;AACJ;;AAED,UAAUC,YAAV,CAAuB;AAAEjB,EAAAA,EAAF;AAAMU,EAAAA;AAAN,CAAvB,EAAuC;AACnC,MAAIA,MAAM,IAAI,CAAd,EAAiB;AAEjB,QAAMJ,KAAK,GAAG,MAAMlB,IAAI,CAACO,GAAG,CAACY,GAAL,EAAW,SAAQP,EAAG,EAAtB,CAAxB;AACA,QAAMQ,WAAW,GAAGF,KAAK,CAACG,IAAN,CAAWC,MAA/B;;AAEA,MAAIA,MAAM,GAAGF,WAAb,EAA0B;AACtBf,IAAAA,KAAK,CAACmB,KAAN,CAAY,+BAAZ;AACA;AACH;;AAED,QAAMvB,GAAG,CAACQ,mBAAmB,CAACG,EAAD,EAAKU,MAAL,CAApB,CAAT;AACH;;AAED,eAAenB,GAAG,CAAC,CACfC,UAAU,CAAC,mBAAD,EAAsBO,SAAtB,CADK,EAEfP,UAAU,CAAC,6BAAD,EAAgCyB,YAAhC,CAFK,CAAD,CAAlB","sourcesContent":["import { call, put, select, all, takeLatest } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\n\nimport history from '../../../services/history';\nimport api from '../../../services/api';\n\nimport { addToCartSuccess, updateAmountSuccess } from './actions';\nimport { formatPrice } from '../../../util/format';\n\nfunction* addToCart({ id }) {\n    // get the current state and perform a selector on it\n    const productExists = yield select(state =>\n        state.cart.find(p => p.id === id)\n    );\n\n    // checking the stock amount\n    const stock = yield call(api.get, `/stock/${id}`);\n    const stockAmount = stock.data.amount;\n    // if exists, we use the current amount, otherwise, it's zero because it's not on cart yet\n    const currentAmount = productExists ? productExists.amount : 0;\n\n    const amount = currentAmount + 1; // we update the amount\n\n    if (amount > stockAmount) {\n        // console.tron.warn(`Out of stock`);\n        toast.error('Amount requested out of stock');\n        return;\n    }\n\n    if (productExists) {\n        yield put(updateAmountSuccess(id, amount));\n    } else {\n        const response = yield call(api.get, `/products/${id}`);\n\n        const data = {\n            ...response.data,\n            amount: 1,\n            priceFormatted: formatPrice(response.data.price),\n        };\n        yield put(addToCartSuccess(data));\n\n        history.push('/cart'); // we only navigate on the first time we choose a product\n    }\n}\n\nfunction* updateAmount({ id, amount }) {\n    if (amount <= 0) return;\n\n    const stock = yield call(api.get, `stock/${id}`);\n    const stockAmount = stock.data.amount;\n\n    if (amount > stockAmount) {\n        toast.error('Amount requested out of stock');\n        return;\n    }\n\n    yield put(updateAmountSuccess(id, amount));\n}\n\nexport default all([\n    takeLatest('@cart/ADD_REQUEST', addToCart),\n    takeLatest('@cart/UPDATE_AMOUNT_REQUEST', updateAmount),\n]);\n"]},"metadata":{},"sourceType":"module"}